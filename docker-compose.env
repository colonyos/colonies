export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LC_CTYPE=UTF-8
export TZ=Europe/Stockholm

# ============================================================================
# HTTP SERVER BACKEND CONFIGURATION
# ============================================================================
# Configuration for the HTTP/REST API server backend
export COLONIES_SERVER_HTTP_HOST="0.0.0.0"       # Host to bind HTTP server (0.0.0.0 = all interfaces)
export COLONIES_SERVER_HTTP_PORT="50080"         # HTTP server port
export COLONIES_SERVER_HTTP_TLS="false"          # Enable TLS for HTTP
# export COLONIES_SERVER_HTTP_TLS_CERT="/path/to/cert.pem"  # TLS certificate (if TLS enabled)
# export COLONIES_SERVER_HTTP_TLS_KEY="/path/to/key.pem"    # TLS key (if TLS enabled)
# ============================================================================

# ============================================================================
# LIBP2P SERVER BACKEND CONFIGURATION
# ============================================================================
# Configuration for the LibP2P P2P networking backend
export COLONIES_SERVER_LIBP2P_PORT="50000"        # LibP2P TCP port (QUIC uses port+1)
export COLONIES_SERVER_LIBP2P_IDENTITY="08011240b6b2163af609c2099dd5950e67246e4124d5e0469f4d3fcecb71df6e4a3f28211e5c04474c4f19e9bef163c39187ee1c01648e65ba3591e37a4c84ff2b2784d4"

#export COLONIES_SERVER_LIBP2P_ANNOUNCE_ADDRS="/ip4/10.0.0.82/tcp/50000,/ip4/10.0.0.82/udp/50001/quic-v1"

# Bootstrap peers for DHT discovery (comma-separated multiaddresses)
# Public libp2p bootstrap nodes for DHT discovery and AutoNAT
#export COLONIES_SERVER_LIBP2P_BOOTSTRAP_PEERS="/dnsaddr/bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN,/dnsaddr/bootstrap.libp2p.io/p2p/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa,/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb,/dnsaddr/bootstrap.libp2p.io/p2p/QmcZf59bWwK5XFi76CZX8cbJ4BhTzzA3gU1ZjYZcYW3dwt"
export COLONIES_SERVER_LIBP2P_BOOTSTRAP_PEERS="/ip4/79.136.25.102/tcp/4001/p2p/12D3KooWAecYkEhc53VHMcdvY5ipeFD9QddqBmcLfDQCYhVgcBBT"


# Announce addresses for external DHT discovery (OPTIONAL - auto-detected by default!)
# LibP2P automatically detects external addresses using AutoNAT, UPnP, and NAT hole punching.
#
# IMPORTANT FOR NETWORK ACCESS:
# When running in Docker on macOS/Windows, AutoNAT can only detect Docker-internal addresses.
# For discovery from other machines on your network, you MUST manually set your host's IP:
#
# 1. Find your host machine's network IP: ifconfig (macOS/Linux) or ipconfig (Windows)
# 2. Set the announce address to your host's IP (replace 192.168.1.100 with YOUR IP):
#    export COLONIES_SERVER_LIBP2P_ANNOUNCE_ADDRS="/ip4/192.168.1.100/tcp/50000,/ip4/192.168.1.100/udp/50001/quic-v1"
# 3. Make sure ports 50000/tcp and 50001/udp are accessible (check firewall)
#
# Examples:
#   - Local network: export COLONIES_SERVER_LIBP2P_ANNOUNCE_ADDRS="/ip4/192.168.1.100/tcp/50000,/ip4/192.168.1.100/udp/50001/quic-v1"
#   - Public IP:     export COLONIES_SERVER_LIBP2P_ANNOUNCE_ADDRS="/ip4/YOUR_PUBLIC_IP/tcp/50000,/ip4/YOUR_PUBLIC_IP/udp/50001/quic-v1"
#
# Leave unset for local testing (localhost only):
# export COLONIES_SERVER_LIBP2P_ANNOUNCE_ADDRS=""
# ============================================================================

# ============================================================================
# GRPC SERVER BACKEND CONFIGURATION
# ============================================================================
# Configuration for the gRPC server backend
export COLONIES_SERVER_GRPC_PORT="50051"         # gRPC server port
export COLONIES_SERVER_GRPC_INSECURE="true"      # Run without TLS (set to false for production)
# export COLONIES_SERVER_GRPC_TLS_CERT="/path/to/cert.pem"  # TLS certificate (required if INSECURE=false)
# export COLONIES_SERVER_GRPC_TLS_KEY="/path/to/key.pem"    # TLS key (required if INSECURE=false)
# ============================================================================

# ============================================================================
# COAP SERVER BACKEND CONFIGURATION
# ============================================================================
# Configuration for the CoAP (Constrained Application Protocol) server backend
export COLONIES_SERVER_COAP_PORT="5683"          # CoAP server port (UDP, default CoAP port)
# ============================================================================

export COLONIES_MONITOR_PORT="21120"
export COLONIES_MONITOR_INTERVAL="1"

# ============================================================================
# CLIENT BACKEND CONFIGURATION
# ============================================================================
# COLONIES_CLIENT_BACKENDS: Specify which transport(s) the client should use
# Supports comma-separated list for automatic fallback
#
# Options:
#   "http"           - HTTP/HTTPS only (traditional REST API)
#   "grpc"           - gRPC only (high-performance RPC)
#   "libp2p"         - LibP2P P2P networking only
#   "coap"           - CoAP only (lightweight UDP for IoT)
#   "libp2p,http"    - Try LibP2P first, fallback to HTTP
#   "http,libp2p"    - Try HTTP first, fallback to LibP2P
#   "grpc,http"      - Try gRPC first, fallback to HTTP
#   "coap,http"      - Try CoAP first, fallback to HTTP

# Default to HTTP for backward compatibility
export COLONIES_CLIENT_BACKENDS="libp2p"

# HTTP client config (for CLI use outside docker)
export COLONIES_CLIENT_HTTP_HOST="localhost"
export COLONIES_CLIENT_HTTP_PORT="50080"
export COLONIES_CLIENT_HTTP_INSECURE="true"

# gRPC client config (for CLI use outside docker when testing gRPC)
export COLONIES_CLIENT_GRPC_HOST="localhost"
export COLONIES_CLIENT_GRPC_PORT="50051"
export COLONIES_CLIENT_GRPC_INSECURE="true"

# LibP2P client config (for CLI use outside docker when testing LibP2P)
export COLONIES_CLIENT_LIBP2P_HOST="dht"  # Use DHT discovery
# Use same public bootstrap nodes as server for DHT discovery
#export COLONIES_CLIENT_LIBP2P_BOOTSTRAP_PEERS="/dnsaddr/bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN,/dnsaddr/bootstrap.libp2p.io/p2p/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa,/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb,/dnsaddr/bootstrap.libp2p.io/p2p/QmcZf59bWwK5XFi76CZX8cbJ4BhTzzA3gU1ZjYZcYW3dwt"
export COLONIES_CLIENT_LIBP2P_BOOTSTRAP_PEERS="/ip4/79.136.25.102/tcp/4001/p2p/12D3KooWAecYkEhc53VHMcdvY5ipeFD9QddqBmcLfDQCYhVgcBBT"

#export COLONIES_CLIENT_LIBP2P_BOOTSTRAP_PEERS="/dnsaddr/bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN,/dnsaddr/bootstrap.libp2p.io/p2p/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa,/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb,/dnsaddr/bootstrap.libp2p.io/p2p/QmcZf59bWwK5XFi76CZX8cbJ4BhTzzA3gU1ZjYZcYW3dwt"

# CoAP client config (for CLI use outside docker when testing CoAP)
export COLONIES_CLIENT_COAP_HOST="localhost"
export COLONIES_CLIENT_COAP_PORT="5683"

# Backward compatibility (single backend)
export COLONIES_SERVER_HOST="localhost"

#
# ============================================================================

# ============================================================================
# SERVER BACKEND SELECTION
# ============================================================================
# COLONIES_SERVER_BACKENDS: Controls which backend(s) the server runs
# NOTE: With separate config variables above, each backend is configured
# independently using COLONIES_SERVER_HTTP_*, COLONIES_SERVER_GRPC_*, COLONIES_SERVER_LIBP2P_*, and COLONIES_SERVER_COAP_*
#
# Options:
#   "http"            - HTTP/HTTPS only (uses COLONIES_SERVER_HTTP_* config)
#   "grpc"            - gRPC only (uses COLONIES_SERVER_GRPC_* config)
#   "libp2p"          - LibP2P + HTTP (uses both config sections)
#   "coap"            - CoAP only (uses COLONIES_SERVER_COAP_* config)
#   "http,libp2p"     - Same as "libp2p" (runs both backends)
#   "libp2p,http"     - Same as "libp2p" (runs both backends)
#
# Examples:
# HTTP only (simple deployment):
# export COLONIES_SERVER_BACKENDS="http"
#
# HTTP, gRPC, LibP2P, and CoAP - all four backends running simultaneously
export COLONIES_SERVER_BACKENDS="http,grpc,libp2p,coap"
#
# LibP2P + HTTP (maximum compatibility - RECOMMENDED):
# export COLONIES_SERVER_BACKENDS="libp2p,http"
# export COLONIES_SERVER_BACKENDS="libp2p"  # Same as above
#
# Legacy variable (still supported):
# export COLONIES_BACKEND_TYPE="libp2p"  # Use COLONIES_SERVER_BACKENDS instead
#
# NOTE: LibP2P backend currently always includes HTTP for backward compatibility.
# Pure LibP2P-only mode (without HTTP) is planned for a future release.
# ============================================================================

# ============================================================================
# CLIENT SERVER HOST CONFIGURATION (for clients connecting to server)
# ============================================================================
# COLONIES_SERVER_HOST: Used by CLIENTS to find the server
#
# 1. Direct connection with multiaddress (when you know the server address):
# export COLONIES_SERVER_HOST="/dns/localhost/tcp/5000/p2p/12D3KooWBrsnBU9rZ8ZBaniVexPfdLmYyF34doTRtSJ7XqfC3JfM"
#
# 2. DHT-based discovery (automatic peer discovery, works behind firewalls):
# export COLONIES_SERVER_HOST="dht"  # Uses default rendezvous point "colonies-server"
# export COLONIES_SERVER_HOST="dht:my-custom-rendezvous"  # Custom rendezvous point
#
# 3. Hostname for HTTP (when using http backend or resilient mode):
# export COLONIES_SERVER_HOST="localhost"  # For local development
# export COLONIES_SERVER_HOST="colonies.example.com"  # For production
#
# When using DHT discovery:
# - Client will automatically find servers advertising on the DHT
# - Works through NAT/firewalls using libp2p hole-punching and relays
# - No need to know server IP or domain name
# - Server must have COLONIES_LIBP2P_BOOTSTRAP_PEERS set to join DHT network
#
# Alternative multiaddress examples (for LibP2P direct connections):
# - Docker network: export COLONIES_SERVER_HOST="/dns/colonies-server/tcp/5000/p2p/12D3Koo..."
# - Public domain: export COLONIES_SERVER_HOST="/dns/example.com/tcp/5000/p2p/12D3Koo..."
# - Public IP: export COLONIES_SERVER_HOST="/ip4/x.x.x.x/tcp/5000/p2p/12D3Koo..."
# ============================================================================

# ============================================================================
# SERVER IDENTITY AND SECURITY
# ============================================================================
export COLONIES_SERVER_ID="039231c7644e04b6895471dd5335cf332681c54e27f81fac54f9067b3f2c0103"
export COLONIES_SERVER_PRVKEY="fcc79953d8a751bf41db661592dc34d30004b1a651ffa0725b03ac227641499d"
export COLONIES_DB_HOST="timescaledb"
export COLONIES_DB_USER="postgres"
export COLONIES_DB_PASSWORD="rFcLGNkgsNtksg6Pgtn9CumL4xXBQ7"
export COLONIES_COLONY_NAME="dev"
export COLONIES_COLONY_ID="4787a5071856a4acf702b2ffcea422e3237a679c681314113d86139461290cf4"
export COLONIES_COLONY_PRVKEY="ba949fa134981372d6da62b6a56f336ab4d843b22c02a4257dcf7d0d73097514"
export COLONIES_ID="3fc05cf3df4b494e95d6a3d297a34f19938f7daa7422ab0d4f794454133341ac"
export COLONIES_PRVKEY="ddf7f7791208083b6a9ed975a72684f6406a269cfa36f1b1c32045c0a71fff05"
export COLONIES_EXECUTOR_TYPE="cli"
export COLONIES_EXECUTOR_NAME="dev-docker"
export EXECUTOR_FS_DIR="/tmp/cfs"
export EXECUTOR_START_PARALLEL_CONTAINERS="false"
export EXECUTOR_GPU="false"
export COLONIES_CRON_CHECKER_PERIOD="1000"
export COLONIES_GENERATOR_CHECKER_PERIOD="1000"
export COLONIES_EXCLUSIVE_ASSIGN="true"
export COLONIES_ALLOW_EXECUTOR_REREGISTER="true"
export COLONIES_RETENTION="false"
export COLONIES_RETENTION_POLICY="200"
export COLONIES_SERVER_PROFILER="false"
export COLONIES_SERVER_PROFILER_PORT="6060"
export COLONIES_VERBOSE="false"
export MINIO_USER="admin"
export MINIO_PASSWORD="admin12345"
export AWS_S3_ENDPOINT="localhost:9000"
export AWS_S3_ACCESSKEY="RrXN2vcLeHjBptG8a3Ay"
export AWS_S3_SECRETKEY="ivwLB0Luqomq65nNVmoo8fTBgxXgNvqYGC50VQN6"
export AWS_S3_REGION_KEY=""
export AWS_S3_BUCKET="colonies-prod"
export AWS_S3_TLS="false"
export AWS_S3_SKIPVERIFY="false"

# When using the Colonies CLI on Windows with Git Bash, Git Bash will interpret file paths
# starting with a slash (/) and automatically translates these Unix-like paths into
# Windows-style paths, e.g. /c becomes c:/ This behavior can be disabled by the
# setting the MSYS_NO_PATHCONV environment variable to 1.
export MSYS_NO_PATHCONV=1
export COLONIES_CLI_ASCII="false"
