export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LC_CTYPE=UTF-8
export TZ=Europe/Stockholm
export COLONIES_SERVER_TLS="false"
export COLONIES_CLIENT_BACKEND="libp2p"
export COLONIES_SERVER_PORT="50080"
export COLONIES_MONITOR_PORT="21120"
export COLONIES_MONITOR_INTERVAL="1"
# COLONIES_SERVER_HOST configuration - Multiple options:
#
# 1. Direct connection with multiaddress (when you know the server address):
# export COLONIES_SERVER_HOST="/dns/localhost/tcp/5000/p2p/12D3KooWBrsnBU9rZ8ZBaniVexPfdLmYyF34doTRtSJ7XqfC3JfM"
#
# 2. DHT-based discovery (automatic peer discovery, works behind firewalls):
export COLONIES_SERVER_HOST="dht"  # Uses default rendezvous point "colonies-server"
# export COLONIES_SERVER_HOST="dht:my-custom-rendezvous"  # Custom rendezvous point
#
# When using DHT discovery:
# - Client will automatically find servers advertising on the DHT
# - Works through NAT/firewalls using libp2p hole-punching and relays
# - No need to know server IP or domain name
# - Server must have COLONIES_LIBP2P_BOOTSTRAP_PEERS set to join DHT network
#
# Alternative multiaddress examples:
# - Docker network: export COLONIES_SERVER_HOST="/dns/colonies-server/tcp/5000/p2p/12D3Koo..."
# - Public domain: export COLONIES_SERVER_HOST="/dns/example.com/tcp/5000/p2p/12D3Koo..."
# - Public IP: export COLONIES_SERVER_HOST="/ip4/x.x.x.x/tcp/5000/p2p/12D3Koo..."
# Hybrid mode: Mix of local Colonies server + public IPFS nodes
# This works best for testing - local server is found immediately via DHT,
# while public nodes help with NAT traversal and global DHT participation
export COLONIES_LIBP2P_BOOTSTRAP_PEERS="/dns/localhost/tcp/5000/p2p/12D3KooWBrsnBU9rZ8ZBaniVexPfdLmYyF34doTRtSJ7XqfC3JfM,/dnsaddr/bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN,/dnsaddr/bootstrap.libp2p.io/p2p/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa"

# Pure production mode (public bootstrap only - DHT propagation takes longer):
# export COLONIES_LIBP2P_BOOTSTRAP_PEERS="/dnsaddr/bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN,/dnsaddr/bootstrap.libp2p.io/p2p/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa,/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb"

# Local only mode (fastest for development):
# export COLONIES_LIBP2P_BOOTSTRAP_PEERS="/dns/localhost/tcp/5000/p2p/12D3KooWBrsnBU9rZ8ZBaniVexPfdLmYyF34doTRtSJ7XqfC3JfM" 
export COLONIES_SERVER_ID="039231c7644e04b6895471dd5335cf332681c54e27f81fac54f9067b3f2c0103"
export COLONIES_SERVER_PRVKEY="fcc79953d8a751bf41db661592dc34d30004b1a651ffa0725b03ac227641499d"
export COLONIES_LIBP2P_IDENTITY="08011240b6b2163af609c2099dd5950e67246e4124d5e0469f4d3fcecb71df6e4a3f28211e5c04474c4f19e9bef163c39187ee1c01648e65ba3591e37a4c84ff2b2784d4"
export COLONIES_LIBP2P_PORT="5000"

# Bootstrap peers for DHT-based peer discovery (optional)
# Allows the server to work behind firewalls using DHT for NAT traversal
# Format: comma-separated multiaddresses
# Example: export COLONIES_LIBP2P_BOOTSTRAP_PEERS="/dns/server1.example.com/tcp/5000/p2p/12D3Koo...,/ip4/x.x.x.x/tcp/5000/p2p/12D3Koo..."
# If not set, server is still discoverable via DHT but won't proactively connect to peers
# export COLONIES_LIBP2P_BOOTSTRAP_PEERS=""
export COLONIES_DB_HOST="timescaledb"
export COLONIES_DB_USER="postgres"
export COLONIES_DB_PASSWORD="rFcLGNkgsNtksg6Pgtn9CumL4xXBQ7"
export COLONIES_COLONY_NAME="dev"
export COLONIES_COLONY_ID="4787a5071856a4acf702b2ffcea422e3237a679c681314113d86139461290cf4"
export COLONIES_COLONY_PRVKEY="ba949fa134981372d6da62b6a56f336ab4d843b22c02a4257dcf7d0d73097514"
export COLONIES_ID="3fc05cf3df4b494e95d6a3d297a34f19938f7daa7422ab0d4f794454133341ac"
export COLONIES_PRVKEY="ddf7f7791208083b6a9ed975a72684f6406a269cfa36f1b1c32045c0a71fff05"
export COLONIES_EXECUTOR_TYPE="cli"
export COLONIES_EXECUTOR_NAME="dev-docker"
export EXECUTOR_FS_DIR="/tmp/cfs"
export EXECUTOR_START_PARALLEL_CONTAINERS="false"
export EXECUTOR_GPU="false"
export COLONIES_CRON_CHECKER_PERIOD="1000"
export COLONIES_GENERATOR_CHECKER_PERIOD="1000"
export COLONIES_EXCLUSIVE_ASSIGN="true"
export COLONIES_ALLOW_EXECUTOR_REREGISTER="true"
export COLONIES_RETENTION="false"
export COLONIES_RETENTION_POLICY="200"
export COLONIES_SERVER_PROFILER="false"
export COLONIES_SERVER_PROFILER_PORT="6060"
export COLONIES_VERBOSE="false"
export MINIO_USER="admin"
export MINIO_PASSWORD="admin12345"
export AWS_S3_ENDPOINT="localhost:9000"
export AWS_S3_ACCESSKEY="RrXN2vcLeHjBptG8a3Ay"
export AWS_S3_SECRETKEY="ivwLB0Luqomq65nNVmoo8fTBgxXgNvqYGC50VQN6"
export AWS_S3_REGION_KEY=""
export AWS_S3_BUCKET="colonies-prod"
export AWS_S3_TLS="false"
export AWS_S3_SKIPVERIFY="false"

# When using the Colonies CLI on Windows with Git Bash, Git Bash will interpret file paths 
# starting with a slash (/) and automatically translates these Unix-like paths into 
# Windows-style paths, e.g. /c becomes c:/ This behavior can be disabled by the 
# setting the MSYS_NO_PATHCONV environment variable to 1.
export MSYS_NO_PATHCONV=1
export COLONIES_CLI_ASCII="false"
