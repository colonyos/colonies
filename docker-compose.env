export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LC_CTYPE=UTF-8
export TZ=Europe/Stockholm

# ============================================================================
# HTTP SERVER BACKEND CONFIGURATION
# ============================================================================
# Configuration for the HTTP/REST API server backend
export COLONIES_SERVER_HTTP_HOST="0.0.0.0"       # Host to bind HTTP server (0.0.0.0 = all interfaces)
export COLONIES_SERVER_HTTP_PORT="50080"         # HTTP server port
export COLONIES_SERVER_HTTP_TLS="false"          # Enable TLS for HTTP
# export COLONIES_SERVER_HTTP_TLS_CERT="/path/to/cert.pem"  # TLS certificate (if TLS enabled)
# export COLONIES_SERVER_HTTP_TLS_KEY="/path/to/key.pem"    # TLS key (if TLS enabled)
# ============================================================================

# ============================================================================
# LIBP2P SERVER BACKEND CONFIGURATION
# ============================================================================
# Configuration for the LibP2P P2P networking backend
export COLONIES_SERVER_LIBP2P_PORT="5000"        # LibP2P TCP port (QUIC uses port+1)
export COLONIES_SERVER_LIBP2P_IDENTITY="08011240b6b2163af609c2099dd5950e67246e4124d5e0469f4d3fcecb71df6e4a3f28211e5c04474c4f19e9bef163c39187ee1c01648e65ba3591e37a4c84ff2b2784d4"
# Bootstrap peers for DHT discovery (comma-separated multiaddresses)
export COLONIES_SERVER_LIBP2P_BOOTSTRAP_PEERS="/dns/localhost/tcp/5000/p2p/12D3KooWBrsnBU9rZ8ZBaniVexPfdLmYyF34doTRtSJ7XqfC3JfM,/dnsaddr/bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN,/dnsaddr/bootstrap.libp2p.io/p2p/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa"
# ============================================================================

export COLONIES_MONITOR_PORT="21120"
export COLONIES_MONITOR_INTERVAL="1"

# ============================================================================
# CLIENT BACKEND CONFIGURATION
# ============================================================================
# COLONIES_CLIENT_BACKENDS: Specify which transport(s) the client should use
# Supports comma-separated list for automatic fallback
#
# Options:
#   "http"           - HTTP/HTTPS only (traditional REST API)
#   "libp2p"         - LibP2P P2P networking only
#   "libp2p,http"    - Try LibP2P first, fallback to HTTP (RESILIENT MODE)
#   "http,libp2p"    - Try HTTP first, fallback to LibP2P
#
# Examples:
# Development (HTTP only, fast):
# export COLONIES_CLIENT_BACKENDS="http"
# export COLONIES_SERVER_HOST="localhost"
#
# Production P2P (DHT discovery, works behind firewalls):
# export COLONIES_CLIENT_BACKENDS="libp2p"
# export COLONIES_SERVER_HOST="dht"
#
# Resilient mode (HTTP primary, P2P fallback - FASTEST for local dev):
export COLONIES_CLIENT_BACKENDS="libp2p"
export COLONIES_SERVER_HOST="localhost"
#
# P2P primary with HTTP fallback (resilient mode):
# export COLONIES_CLIENT_BACKENDS="libp2p,http"
# export COLONIES_SERVER_HOST="localhost"
#
# Pure LibP2P mode (DHT discovery only - slower initial connection):
# export COLONIES_CLIENT_BACKENDS="libp2p"
# export COLONIES_SERVER_HOST="dht"
#
# Legacy variable (still supported for backward compatibility):
# export COLONIES_CLIENT_BACKEND="libp2p"
#
# ============================================================================

# ============================================================================
# SERVER BACKEND SELECTION
# ============================================================================
# COLONIES_SERVER_BACKENDS: Controls which backend(s) the server runs
# NOTE: With separate config variables above, each backend is configured
# independently using COLONIES_SERVER_HTTP_* and COLONIES_SERVER_LIBP2P_*
#
# Options:
#   "http"            - HTTP/HTTPS only (uses COLONIES_SERVER_HTTP_* config)
#   "libp2p"          - LibP2P + HTTP (uses both config sections)
#   "http,libp2p"     - Same as "libp2p" (runs both backends)
#   "libp2p,http"     - Same as "libp2p" (runs both backends)
#
# Examples:
# HTTP only (simple deployment):
export COLONIES_SERVER_BACKENDS="http, libp2p"
#
# LibP2P + HTTP (maximum compatibility - RECOMMENDED):
# export COLONIES_SERVER_BACKENDS="libp2p,http"
# export COLONIES_SERVER_BACKENDS="libp2p"  # Same as above
#
# Legacy variable (still supported):
# export COLONIES_BACKEND_TYPE="libp2p"  # Use COLONIES_SERVER_BACKENDS instead
#
# NOTE: LibP2P backend currently always includes HTTP for backward compatibility.
# Pure LibP2P-only mode (without HTTP) is planned for a future release.
# ============================================================================

# ============================================================================
# CLIENT SERVER HOST CONFIGURATION (for clients connecting to server)
# ============================================================================
# COLONIES_SERVER_HOST: Used by CLIENTS to find the server
#
# 1. Direct connection with multiaddress (when you know the server address):
# export COLONIES_SERVER_HOST="/dns/localhost/tcp/5000/p2p/12D3KooWBrsnBU9rZ8ZBaniVexPfdLmYyF34doTRtSJ7XqfC3JfM"
#
# 2. DHT-based discovery (automatic peer discovery, works behind firewalls):
# export COLONIES_SERVER_HOST="dht"  # Uses default rendezvous point "colonies-server"
# export COLONIES_SERVER_HOST="dht:my-custom-rendezvous"  # Custom rendezvous point
#
# 3. Hostname for HTTP (when using http backend or resilient mode):
# export COLONIES_SERVER_HOST="localhost"  # For local development
# export COLONIES_SERVER_HOST="colonies.example.com"  # For production
#
# When using DHT discovery:
# - Client will automatically find servers advertising on the DHT
# - Works through NAT/firewalls using libp2p hole-punching and relays
# - No need to know server IP or domain name
# - Server must have COLONIES_LIBP2P_BOOTSTRAP_PEERS set to join DHT network
#
# Alternative multiaddress examples (for LibP2P direct connections):
# - Docker network: export COLONIES_SERVER_HOST="/dns/colonies-server/tcp/5000/p2p/12D3Koo..."
# - Public domain: export COLONIES_SERVER_HOST="/dns/example.com/tcp/5000/p2p/12D3Koo..."
# - Public IP: export COLONIES_SERVER_HOST="/ip4/x.x.x.x/tcp/5000/p2p/12D3Koo..."
# ============================================================================

# ============================================================================
# SERVER IDENTITY AND SECURITY
# ============================================================================
export COLONIES_SERVER_ID="039231c7644e04b6895471dd5335cf332681c54e27f81fac54f9067b3f2c0103"
export COLONIES_SERVER_PRVKEY="fcc79953d8a751bf41db661592dc34d30004b1a651ffa0725b03ac227641499d"
export COLONIES_DB_HOST="timescaledb"
export COLONIES_DB_USER="postgres"
export COLONIES_DB_PASSWORD="rFcLGNkgsNtksg6Pgtn9CumL4xXBQ7"
export COLONIES_COLONY_NAME="dev"
export COLONIES_COLONY_ID="4787a5071856a4acf702b2ffcea422e3237a679c681314113d86139461290cf4"
export COLONIES_COLONY_PRVKEY="ba949fa134981372d6da62b6a56f336ab4d843b22c02a4257dcf7d0d73097514"
export COLONIES_ID="3fc05cf3df4b494e95d6a3d297a34f19938f7daa7422ab0d4f794454133341ac"
export COLONIES_PRVKEY="ddf7f7791208083b6a9ed975a72684f6406a269cfa36f1b1c32045c0a71fff05"
export COLONIES_EXECUTOR_TYPE="cli"
export COLONIES_EXECUTOR_NAME="dev-docker"
export EXECUTOR_FS_DIR="/tmp/cfs"
export EXECUTOR_START_PARALLEL_CONTAINERS="false"
export EXECUTOR_GPU="false"
export COLONIES_CRON_CHECKER_PERIOD="1000"
export COLONIES_GENERATOR_CHECKER_PERIOD="1000"
export COLONIES_EXCLUSIVE_ASSIGN="true"
export COLONIES_ALLOW_EXECUTOR_REREGISTER="true"
export COLONIES_RETENTION="false"
export COLONIES_RETENTION_POLICY="200"
export COLONIES_SERVER_PROFILER="false"
export COLONIES_SERVER_PROFILER_PORT="6060"
export COLONIES_VERBOSE="false"
export MINIO_USER="admin"
export MINIO_PASSWORD="admin12345"
export AWS_S3_ENDPOINT="localhost:9000"
export AWS_S3_ACCESSKEY="RrXN2vcLeHjBptG8a3Ay"
export AWS_S3_SECRETKEY="ivwLB0Luqomq65nNVmoo8fTBgxXgNvqYGC50VQN6"
export AWS_S3_REGION_KEY=""
export AWS_S3_BUCKET="colonies-prod"
export AWS_S3_TLS="false"
export AWS_S3_SKIPVERIFY="false"

# When using the Colonies CLI on Windows with Git Bash, Git Bash will interpret file paths
# starting with a slash (/) and automatically translates these Unix-like paths into
# Windows-style paths, e.g. /c becomes c:/ This behavior can be disabled by the
# setting the MSYS_NO_PATHCONV environment variable to 1.
export MSYS_NO_PATHCONV=1
export COLONIES_CLI_ASCII="false"

# ============================================================================
# DEPLOYMENT SCENARIOS
# ============================================================================
#
# Scenario 1: Local Development (Fast, Simple)
# -----------------------------------------------
# export COLONIES_CLIENT_BACKENDS="http"
# export COLONIES_SERVER_HOST="localhost"
# export COLONIES_SERVER_PORT="50080"
#
# Scenario 2: Edge Device with Intermittent Connectivity (Resilient)
# -------------------------------------------------------------------
# export COLONIES_CLIENT_BACKENDS="libp2p,http"  # Try P2P first, fallback to HTTP
# export COLONIES_SERVER_HOST="localhost"
# export COLONIES_LIBP2P_BOOTSTRAP_PEERS="/dns/localhost/tcp/5000/p2p/..."
#
# Scenario 3: Behind Firewall/NAT (P2P Only, DHT Discovery)
# ----------------------------------------------------------
# export COLONIES_CLIENT_BACKENDS="libp2p"
# export COLONIES_SERVER_HOST="dht"
# export COLONIES_LIBP2P_BOOTSTRAP_PEERS="<public-bootstrap-nodes>"
#
# Scenario 4: Autonomous System with Network Partitions (Maximum Resilience)
# ---------------------------------------------------------------------------
# export COLONIES_CLIENT_BACKENDS="libp2p,http"  # Multiple transports
# export COLONIES_SERVER_HOST="localhost"  # HTTP fallback
# export COLONIES_LIBP2P_BOOTSTRAP_PEERS="<hybrid-mode>"  # DHT + direct peers
# This enables:
# - Work during network partitions (local autonomy)
# - Automatic reconnection when network restored
# - Multiple paths to reach server (P2P + HTTP)
# - Perfect for drones, robots, edge AI, distributed sensors
#
# ============================================================================
