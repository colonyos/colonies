// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: colonies.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ColoniesService_SendMessage_FullMethodName = "/colonies.ColoniesService/SendMessage"
	ColoniesService_CheckHealth_FullMethodName = "/colonies.ColoniesService/CheckHealth"
)

// ColoniesServiceClient is the client API for ColoniesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ColoniesService provides RPC methods for Colonies communication
type ColoniesServiceClient interface {
	// SendMessage sends an RPC message and returns the response
	SendMessage(ctx context.Context, in *RPCRequest, opts ...grpc.CallOption) (*RPCResponse, error)
	// CheckHealth checks if the server is healthy
	CheckHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type coloniesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewColoniesServiceClient(cc grpc.ClientConnInterface) ColoniesServiceClient {
	return &coloniesServiceClient{cc}
}

func (c *coloniesServiceClient) SendMessage(ctx context.Context, in *RPCRequest, opts ...grpc.CallOption) (*RPCResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RPCResponse)
	err := c.cc.Invoke(ctx, ColoniesService_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coloniesServiceClient) CheckHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, ColoniesService_CheckHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ColoniesServiceServer is the server API for ColoniesService service.
// All implementations must embed UnimplementedColoniesServiceServer
// for forward compatibility.
//
// ColoniesService provides RPC methods for Colonies communication
type ColoniesServiceServer interface {
	// SendMessage sends an RPC message and returns the response
	SendMessage(context.Context, *RPCRequest) (*RPCResponse, error)
	// CheckHealth checks if the server is healthy
	CheckHealth(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedColoniesServiceServer()
}

// UnimplementedColoniesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedColoniesServiceServer struct{}

func (UnimplementedColoniesServiceServer) SendMessage(context.Context, *RPCRequest) (*RPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedColoniesServiceServer) CheckHealth(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}
func (UnimplementedColoniesServiceServer) mustEmbedUnimplementedColoniesServiceServer() {}
func (UnimplementedColoniesServiceServer) testEmbeddedByValue()                         {}

// UnsafeColoniesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ColoniesServiceServer will
// result in compilation errors.
type UnsafeColoniesServiceServer interface {
	mustEmbedUnimplementedColoniesServiceServer()
}

func RegisterColoniesServiceServer(s grpc.ServiceRegistrar, srv ColoniesServiceServer) {
	// If the following call pancis, it indicates UnimplementedColoniesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ColoniesService_ServiceDesc, srv)
}

func _ColoniesService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColoniesServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ColoniesService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColoniesServiceServer).SendMessage(ctx, req.(*RPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ColoniesService_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColoniesServiceServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ColoniesService_CheckHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColoniesServiceServer).CheckHealth(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ColoniesService_ServiceDesc is the grpc.ServiceDesc for ColoniesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ColoniesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "colonies.ColoniesService",
	HandlerType: (*ColoniesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _ColoniesService_SendMessage_Handler,
		},
		{
			MethodName: "CheckHealth",
			Handler:    _ColoniesService_CheckHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "colonies.proto",
}
